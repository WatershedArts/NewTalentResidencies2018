//
//  AlphanumericDisplay.h
//  InstagramTv
//
//  Created by David Haylock on 05/03/2018.
//

#ifndef AlphanumericDisplay_h
#define AlphanumericDisplay_h

#include <stdio.h>
#include "ofMain.h"

#ifndef TARGET_RASPBERRY_PI
	#include "ofxTextAlignTTF.h"
#else
	#include "ofxGPIO.h"
#endif

#define DEFAULT_ADDRESS 0x70
#define HT16K33_BLINK_CMD 0x80
#define HT16K33_BLINK_DISPLAYON 0x01
#define HT16K33_BLINK_OFF 0x00
#define HT16K33_BLINK_2HZ 0x02
#define HT16K33_BLINK_1HZ 0x04
#define HT16K33_BLINK_HALFHZ 0x06
#define HT16K33_SYSTEM_SETUP 0x20
#define HT16K33_OSCILLATOR 0x01
#define HT16K33_CMD_BRIGHTNESS 0xE0
#define BUFFER_LENGTH 16

class AlphanumericDisplay {
	public:
	
		//--------------------------------------------------------------
		/**
			Constructor
		*/
		//--------------------------------------------------------------
		AlphanumericDisplay();
	
		//--------------------------------------------------------------
		/**
			Deconstructor
		*/
		//--------------------------------------------------------------
		~AlphanumericDisplay();
	
		//--------------------------------------------------------------
		/**
			Setup the Alphanumeric Display
		 
			If the app is built for Mac OSX it will ignore the GPIO
			library and generate a text replica.

			@param address the i2c address of the unit
		*/
		//--------------------------------------------------------------
		void setupDisplay(uint16_t address);
	
	
		//--------------------------------------------------------------
		/**
			Set the Display Text

			The string must be 4 character or less
		 
			@param val the value to display
		*/
		//--------------------------------------------------------------
		void setDisplay(string val);
	
		//--------------------------------------------------------------
		/**
			Clear the Screen
		*/
		//--------------------------------------------------------------
		void clear();
	
		//--------------------------------------------------------------
		/**
			Close the i2c bus
		*/
		//--------------------------------------------------------------
		void exit();
	
	private:
	
		//--------------------------------------------------------------
		/**
			Write the Content to the Display
		*/
		//--------------------------------------------------------------
		void writeDisplay();
	
#ifndef TARGET_RASPBERRY_PI
		ofxTextAlignTTF text;
#else
		I2c *bus;
#endif
		uint16_t displayBuffer[4];
		string copyofstring;
	
	protected:
	
	
		//	This is the Bitmask reference for the characters
		const map<string,uint16_t> characterList = {{" ",0b0000000000000000},{"!",0b0000000000000110},{"#",0b0001001011001110},{"$",0b0001001011101101},{"%",0b0000110000100100},{"&",0b0010001101011101},{"(",0b0010010000000000},{")",0b0000100100000000},{"*",0b0011111111000000},{"+",0b0001001011000000},{",",0b0000100000000000},{"-",0b0000000011000000},{".",0b0000000000000000},{"/",0b0000110000000000},{"0",0b0000110000111111},{"1",0b0000000000000110},{"2",0b0000000011011011},{"3",0b0000000010001111},{"4",0b0000000011100110},{"5",0b0010000001101001},{"6",0b0000000011111101},{"7",0b0000000000000111},{"8",0b0000000011111111},{"9",0b0000000011101111},{":",0b0001001000000000},{";",0b0000101000000000},{"<",0b0010010000000000},{"=",0b0000000011001000},{">",0b0000100100000000},{"?",0b0001000010000011},{"@",0b0000001010111011},{"A",0b0000000011110111},{"B",0b0001001010001111},{"C",0b0000000000111001},{"D",0b0001001000001111},{"E",0b0000000011111001},{"F",0b0000000001110001},{"G",0b0000000010111101},{"H",0b0000000011110110},{"I",0b0001001000000000},{"J",0b0000000000011110},{"K",0b0010010001110000},{"L",0b0000000000111000},{"M",0b0000010100110110},{"N",0b0010000100110110},{"O",0b0000000000111111},{"P",0b0000000011110011},{"Q",0b0010000000111111},{"R",0b0010000011110011},{"S",0b0000000011101101},{"T",0b0001001000000001},{"U",0b0000000000111110},{"V",0b0000110000110000},{"W",0b0010100000110110},{"X",0b0010110100000000},{"Y",0b0001010100000000},{"Z",0b0000110000001001},{"[",0b0000000000111001},{"",0b0000000000000000},{"]",0b0000000000001111},{"^",0b0000110000000011},{"_",0b0000000000001000},{"`",0b0000000100000000},{"a",0b0001000001011000},{"b",0b0010000001111000},{"c",0b0000000011011000},{"d",0b0000100010001110},{"e",0b0000100001011000},{"f",0b0000000001110001},{"g",0b0000010010001110},{"h",0b0001000001110000},{"i",0b0001000000000000},{"j",0b0000000000001110},{"k",0b0011011000000000},{"l",0b0000000000110000},{"m",0b0001000011010100},{"n",0b0001000001010000},{"o",0b0000000011011100},{"p",0b0000000101110000},{"q",0b0000010010000110},{"r",0b0000000001010000},{"s",0b0010000010001000},{"t",0b0000000001111000},{"u",0b0000000000011100},{"v",0b0010000000000100},{"w",0b0010100000010100},{"x",0b0010100011000000},{"y",0b0010000000001100},{"z",0b0000100001001000},{"{",0b0000100101001001},{"|",0b0001001000000000},{"}",0b0010010010001001},{"~",0b0000010100100000}};
};

#endif /* AlphanumericDisplay_h */
